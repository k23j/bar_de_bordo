import 'dart:async';

// import 'package:bar_de_bordo/core/app_state.dart';
import 'package:bar_de_bordo/models/customer.dart';
import 'package:bar_de_bordo/models/customer_collection.dart';
import 'package:bar_de_bordo/models/product.dart';
import 'package:bar_de_bordo/models/product_collection.dart';
import 'package:bar_de_bordo/services/firebase/entity/firestore_document.dart';
import 'package:bar_de_bordo/services/firebase/entity/firestore_entity.dart';
import 'package:bar_de_bordo/services/firebase/typedefs.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

// abstract class FirestoreCollection<T extends FirestoreDocument>
//     extends FirestoreEntity {
//   static late FirestoreCollection instance;
//
//   final FromMap<T> fromMap;
//
//   FirestoreCollection(this.fromMap);
//
//   late final List<T> items;
//
//   static Future<bool> initializeCollection() async {
//     try {
//       FirestoreCollection.instance = FirestoreCollection();
//
//       return FirestoreCollection.instance._internalInitialization();
//     } catch (err) {
//       return false;
//     }
//   }
//
//   Future<bool> _internalInitialization() async {
//     try {
//       final docs = await FirebaseFirestore.instance.collection(path).get();
//       items = docs.docs.map((map) => fromMap(map.data())).toList();
//       return true;
//     } catch (err) {
//       return false;
//     }
//   }
// }

abstract class FirestoreCollection<T extends FirestoreDocument>
    extends FirestoreEntity
    with ChangeNotifier {
  // static final Map<Type, FirestoreCollection> _instances = {};

  // // Type get itemType;

  // FirestoreCollection({required this.fromMap, required this.collectionPath}) {
  //   registerInstance(this);
  // }

  // static void registerInstance(
  //   FirestoreCollection instance,
  // ) {
  //   _instances[instance.runtimeType] = instance;
  // }

  // static FirestoreCollection<T>? getInstance<T extends FirestoreDocument>() {
  //   return _instances[T] as FirestoreCollection<T>?;
  // }

  // static final Map<Type, FirestoreCollection> _instances = {};

  // FirestoreCollection({required this.fromMap}) {
  //   _instances[runtimeType] = this;
  //   // print('-------------------------------------------');
  //   // print(runtimeType);
  //   // print(_instances);
  //   // final registered = _instances[runtimeType] as FirestoreCollection<T>;
  //   // print(registered.fromMap);
  //   // fromMap = registered.fromMap;
  // }

  final String collectionPath;

  final FromMap<T> fromMap;

  FirestoreCollection({required this.collectionPath, required this.fromMap});

  // static C getInstance<C extends FirestoreCollection>() {
  //   return _instances[C] as C;
  // }

  // static Future<bool> initializeAllCollections() async {
  //   final resultList = await Future.wait(
  //     _instances.values.map((e) => e.internalInitialization()).toList(),
  //   );

  //   return resultList.every((result) => result);
  // }

  // static Future<bool> initializeCollection<T extends FirestoreDocument>({
  //   required String collectionPath,
  //   required FromMap<T> fromMap,
  //   required CollectionFactory<T> createCollection,
  // }) async {
  //   try {
  //     // instance = FirestoreCollection<T>._internal(
  //     //   collectionPath: collectionPath,
  //     //   fromMap: fromMap,
  //     // );
  //     instance = createCollection();
  //     return await instance.internalInitialization();
  //   } catch (err) {
  //     return false;
  //   }
  // }

  // static Future<bool> initializeCollection({
  //   required CollectionFactory createCollection,
  // }) async {
  //   try {
  //     instance = createCollection();
  //     return await instance.internalInitialization();
  //   } catch (err) {
  //     return false;
  //   }
  // }

  @override
  String get id => '';

  @override
  String get parentPath => collectionPath;

  // FirestoreCollection._internal({
  //   required this.collectionPath,
  //   required this.fromMap,
  // });

  // List<T> get items => List.unmodifiable(_itemMap.values);
  // late final Map<String, T> _itemMap;
  // Map<String, T> get itemMap => Map.unmodifiable(_itemMap);
  // late final StreamController<List<T>> _controller;

  CollectionReference get _firestoreCollection =>
      FirebaseFirestore.instance.collection(path);

  Stream<QuerySnapshot> get _snapshotStream => _firestoreCollection.snapshots();

  Stream<List<T>> get itemsStream {
    return _snapshotStream.map((snapshot) {
      return snapshot.docs
          .map((doc) => fromMap(doc.data() as Map<String, dynamic>))
          .toList();
    });
  }

  Future<List<T>> get items {
    return _firestoreCollection.get().then((snapshot) {
      return snapshot.docs
          .map((e) => fromMap(e.data() as Map<String, dynamic>))
          .toList();
    });
  }

  // Future<bool> internalInitialization() async {
  //   try {
  //     _controller = StreamController<List<T>>.broadcast();
  //     final snapshots = await FirebaseFirestore.instance.collection(path).get();
  //     _itemMap = Map.fromEntries(
  //       snapshots.docs.map((doc) => MapEntry(doc.id, fromMap(doc.data()))),
  //     );
  //     notifyListeners();
  //     return true;
  //   } catch (err) {
  //     return false;
  //   }
  // }

  Future<bool> deleteItem(T item) async {
    try {
      final bool success = await item.delete();
      if (success) notifyListeners();

      return success;
    } catch (err) {
      return false;
    }
  }

  Future<bool> addItem(T item) async {
    try {
      final bool success = await item.saveOnFirestore();
      if (success) notifyListeners();

      return success;
    } catch (err) {
      return false;
    }
  }

  Future<bool> modifyItem(T item) async {
    try {
      final bool success = await item.saveOnFirestore();
      if (success) notifyListeners();

      return success;
    } catch (err) {
      return false;
    }
  }

  @override
  Future<bool> delete() async {
    throw ("Can't delete an entire collection");
  }

  // void dispose() {
  //   _controller.close();
  // }
}
